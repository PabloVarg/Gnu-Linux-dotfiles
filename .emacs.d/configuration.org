#+TITLE: Emacs configuration
#+AUTHOR: Pablo Vargas Berm√∫dez
#+OPTIONS: toc:nil num:nil

* Configure =Use package=

  #+BEGIN_SRC emacs-lisp
    (require 'use-package-ensure)
    (setq use-package-always-ensure t)
  #+END_SRC

* Configure =Auto compile=

  #+BEGIN_SRC emacs-lisp
    (use-package auto-compile
      :config (auto-compile-on-load-mode))

    (setq load-prefer-newer t)
  #+END_SRC

* Configure =Org=

  #+BEGIN_SRC emacs-lisp
    (setq org-src-fontify-natively t
          org-src-tab-acts-natively t
          org-catch-invisible-edits 'show
          org-src-window-setup 'current-window)
  #+END_SRC

** Bullets

   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :init
       (add-hook 'org-mode-hook 'org-bullets-mode))
   #+END_SRC

** Completions

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-structure-template-alist
                  '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
   #+END_SRC

** File paths

   #+BEGIN_SRC emacs-lisp
     (setq org-directory "~/Projects/Org"
           org-agenda-files (list org-directory))
   #+END_SRC

** Visit todo list

   #+BEGIN_SRC emacs-lisp
     (defun visit-todo-list ()
       (interactive)
       (find-file (concat org-directory "/TODO.org")))
   #+END_SRC

** Agenda

   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-span 15
           org-agenda-start-on-weekday nil)
   #+END_SRC

** Capture

   #+BEGIN_SRC emacs-lisp
     (setq org-default-notes-file (concat org-directory "/TODO.org"))
   #+END_SRC

* Configure =Minions=

  #+BEGIN_SRC emacs-lisp
    (use-package minions
      :init
      (setq minions-mode-line-lighter ""
            minions-mode-line-delimiters '("" . ""))
      (minions-mode t))
  #+END_SRC

* Configure =Moody=

  #+BEGIN_SRC emacs-lisp
    (use-package moody
      :config
      (moody-replace-mode-line-buffer-identification)
      (moody-replace-vc-mode)
      (setq moody-mode-line-height 16
            x-underline-at-descent-line t))
  #+END_SRC

* Configure =Ivy=

  #+BEGIN_SRC emacs-lisp
    (use-package ivy
      :config
      (setq ivy-re-builders-alist '((t . ivy--regex-fuzzy)))
      (ivy-mode t))
  #+END_SRC

* Configure =Which Key=

  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :init
      (which-key-mode))
  #+END_SRC

* Configure =Magit=

  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :bind
      ("C-x g" . magit-status))
  #+END_SRC

* Configure =Evil=

  #+BEGIN_SRC emacs-lisp
    (use-package evil
      :init
      (setq evil-want-C-u-scroll t)
      :config
      (evil-mode t))
  #+END_SRC

** Leader

   #+BEGIN_SRC emacs-lisp
     (use-package evil-leader
       :after evil
       :init
       (global-evil-leader-mode)
       :config
       (evil-leader/set-leader "<SPC>")
       (evil-leader/set-key
        "<SPC>" 'execute-extended-command
        "w" 'save-buffer
        "f" 'find-file
        "g" 'magit-status
        "a" 'flycheck-mode
        "xk" 'kill-current-buffer
        "xc" 'save-buffers-kill-terminal
        "xo" 'delete-other-windows
        "q" 'delete-window
        "vs" 'split-window-right
        "hs" 'split-window-below
        "bb" 'ivy-switch-buffer))
   #+END_SRC

** Surround

   #+BEGIN_SRC emacs-lisp
     (use-package evil-surround
       :config
       (global-evil-surround-mode t))
   #+END_SRC

** Comments

   #+BEGIN_SRC emacs-lisp
     (use-package evil-nerd-commenter
       :config
       (evil-leader/set-key
       "ci" 'evilnc-comment-or-uncomment-lines
       "cl" 'evilnc-quick-comment-or-uncomment-to-the-line
       "ll" 'evilnc-quick-comment-or-uncomment-to-the-line
       "cc" 'evilnc-copy-and-comment-lines
       "cp" 'evilnc-comment-or-uncomment-paragraphs
       "cr" 'comment-or-uncomment-region
       "cv" 'evilnc-toggle-invert-comment-line-by-line
       "."  'evilnc-copy-and-comment-operator))
   #+END_SRC

** Folding

   #+BEGIN_SRC emacs-lisp
     (use-package vimish-fold
       :config
       (vimish-fold-global-mode 1))
   #+END_SRC

* Configure =Key Chord=

  #+BEGIN_SRC emacs-lisp
    (use-package key-chord
      :config
      (key-chord-mode 1)
      (key-chord-define evil-insert-state-map ",," 'evil-normal-state))
  #+END_SRC

* Configure =Company=

  #+BEGIN_SRC emacs-lisp
    (use-package company
      :config
      (add-hook 'after-init-hook 'global-company-mode)
      (setq company-idle-delay 0
            company-minimum-prefix-length 1))
  #+END_SRC

* Configure =Dumb jump=

  #+BEGIN_SRC emacs-lisp
    (use-package dumb-jump
      :config
      (setq dumb-jump-selector 'ivy)
      (define-key evil-normal-state-map (kbd "gd") 'dumb-jump-go))
  #+END_SRC

* Configure =Helpful=

  #+BEGIN_SRC emacs-lisp
    (use-package helpful
      :config
      (global-set-key (kbd "C-h f") #'helpful-callable)
      (global-set-key (kbd "C-h v") #'helpful-variable)
      (global-set-key (kbd "C-h k") #'helpful-key)
      (evil-define-key 'normal helpful-mode-map (kbd "q") 'quit-window))
  #+END_SRC

* Backup

  #+BEGIN_SRC emacs-lisp
    (setq make-backup-files nil)
  #+END_SRC

* UI

** Frames

   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1)
     (menu-bar-mode -1)
     (scroll-bar-mode -1)
     (blink-cursor-mode -1)
     (global-display-line-numbers-mode +1)
     (column-number-mode t)
     (set-window-scroll-bars (minibuffer-window) nil nil)
   #+END_SRC

** Bell

   #+BEGIN_SRC emacs-lisp
     (setq ring-bell-function 'ignore)
   #+END_SRC

** Font

   #+BEGIN_SRC emacs-lisp
     (set-frame-font "Hack 11" nil t)
   #+END_SRC

** Prettify

   #+BEGIN_SRC emacs-lisp
     (global-prettify-symbols-mode t)
   #+END_SRC

* Programming environments

** Indentation

   #+BEGIN_SRC emacs-lisp
     (setq-default tab-width 4
                   indent-tabs-mode nil)
   #+END_SRC

* Editing

** Yes or No prompt

   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

** Reload files

   #+BEGIN_SRC emacs-lisp
     (global-auto-revert-mode t)
   #+END_SRC

** Visit configuration

   #+BEGIN_SRC emacs-lisp
     (defun visit-emacs-config ()
       (interactive)
       (find-file "~/.emacs.d/configuration.org"))
   #+END_SRC

** Always kill current buffer

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x k") 'kill-current-buffer)
   #+END_SRC

** Clean whitespaces

   #+BEGIN_SRC emacs-lisp
     (add-hook 'before-save-hook 'whitespace-cleanup)
   #+END_SRC

** Scrolling

   #+BEGIN_SRC emacs-lisp
     (setq scroll-preserve-screen-position t)
   #+END_SRC

* Themes

  #+BEGIN_SRC emacs-lisp
    (use-package zenburn-theme
      :init
      (load-theme 'zenburn t))
  #+END_SRC

** Transparency

   #+BEGIN_SRC emacs-lisp
     (set-frame-parameter (selected-frame) 'alpha 100)
   #+END_SRC

* Keybindings

  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-o") 'other-window)
    (global-set-key (kbd "C-+") 'text-scale-increase)
    (global-set-key (kbd "C--") 'text-scale-decrease)
    (global-set-key (kbd "C-x x") 'execute-extended-command)
    (global-set-key (kbd "C-c l") 'org-store-link)
    (global-set-key (kbd "C-c a") 'org-agenda)
    (global-set-key (kbd "C-c c") 'org-capture)
    (global-set-key (kbd "C-c e") 'visit-emacs-config)
    (global-set-key (kbd "C-c i") 'visit-todo-list)
    (global-set-key (kbd "C-c t") 'shell)
  #+END_SRC
