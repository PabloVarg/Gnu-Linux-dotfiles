#+TITLE: Emacs configuration
#+AUTHOR: Pablo Vargas Bermúdez
#+OPTIONS: toc:nil num:nil

* Configure =use-package=

  #+BEGIN_SRC emacs-lisp
    (require 'use-package-ensure)
    (setq use-package-always-ensure t)
  #+END_SRC

* Configure =Org=

  #+BEGIN_SRC emacs-lisp
    (setq org-src-fontify-natively t
          org-src-tab-acts-natively t
          org-ellipsis " ⤵"
          org-catch-invisible-edits 'show)
  #+END_SRC

** =Org bullets=

   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :init
       (add-hook 'org-mode-hook 'org-bullets-mode))
   #+END_SRC

* Configure =Minions=

  #+BEGIN_SRC emacs-lisp
    (use-package minions
      :init
      (minions-mode t))
  #+END_SRC

* Configure =Moody=

  #+BEGIN_SRC emacs-lisp
    (use-package moody
      :config
      (moody-replace-mode-line-buffer-identification)
      (moody-replace-vc-mode)
      (setq moody-mode-line-height 12))
  #+END_SRC

* Configure =Ivy=

  #+BEGIN_SRC emacs-lisp
    (use-package ivy
      :config
      (ivy-mode t))
  #+END_SRC

* Configure =Which Key=

  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :init
      (which-key-mode))
  #+END_SRC

* Configure =Magit=

  #+BEGIN_SRC emacs-lisp
    (use-package magit)
  #+END_SRC

* Configure =Evil=

  Not yet, but coming soon

  #+BEGIN_SRC emacs-lisp
    (use-package evil
      :init
      (setq evil-want-C-u-scroll t)
      :config
      (evil-mode t)
      (define-key evil-insert-state-map ",," 'evil-normal-state))
  #+END_SRC

** Configure =Leader=

   #+BEGIN_SRC emacs-lisp
     (use-package evil-leader
       :init
       (global-evil-leader-mode)
       :config
       (evil-leader/set-leader "<SPC>")
       (evil-leader/set-key
        "<SPC>" 'execute-extended-command))
   #+END_SRC

* Backup

  #+BEGIN_SRC emacs-lisp
    (setq make-backup-files nil)
  #+END_SRC

* Personal information

  #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Pablo Vargas Bermúdez"
          user-mail-address "pvarber@outlook.es")
  #+END_SRC

* UI

** Frames

   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1)
     (menu-bar-mode -1)
     (scroll-bar-mode -1)
     (blink-cursor-mode -1)
     (global-display-line-numbers-mode +1)
     (column-number-mode t)
     (set-window-scroll-bars (minibuffer-window) nil nil)
   #+END_SRC

** Bell

   #+BEGIN_SRC emacs-lisp
     (setq ring-bell-function 'ignore)
   #+END_SRC

** Font

   #+BEGIN_SRC emacs-lisp
     (set-frame-font "Hack 11" nil t)
   #+END_SRC

** Use fancy lambdas

   #+BEGIN_SRC emacs-lisp
     (global-prettify-symbols-mode t)
   #+END_SRC

* Programming environments

** Indentation

   #+BEGIN_SRC emacs-lisp
     (setq-default tab-width 4
                   indent-tabs-mode nil)
   #+END_SRC

* Editing

** Yes or No prompt

   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

** Reload files

   #+BEGIN_SRC emacs-lisp
     (global-auto-revert-mode t)
   #+END_SRC

** Visit configuration

   #+BEGIN_SRC emacs-lisp
     (defun visit-emacs-config ()
       (interactive)
       (find-file "~/.emacs.d/configuration.org"))

     (global-set-key (kbd "C-c e") 'visit-emacs-config)
   #+END_SRC

** Always kill current buffer

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x k") 'kill-current-buffer)
   #+END_SRC

** Clean whitespaces

   #+BEGIN_SRC emacs-lisp
     (add-hook 'before-save-hook 'whitespace-cleanup)
   #+END_SRC

** Scrolling

   #+BEGIN_SRC emacs-lisp
     (setq scroll-preserve-screen-position t)
   #+END_SRC

* Themes

  #+BEGIN_SRC emacs-lisp
    (use-package zenburn-theme
      :init
      (load-theme 'zenburn t))
  #+END_SRC

** Transparency

   #+BEGIN_SRC emacs-lisp
     (set-frame-parameter (selected-frame) 'alpha 100)
   #+END_SRC

* Keybindings

  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-o") 'other-window)
    (global-set-key (kbd "C-+") 'text-scale-increase)
    (global-set-key (kbd "C--") 'text-scale-decrease)
    (global-set-key (kbd "C-x g") 'magit-status)
    (global-set-key (kbd "C-x x") 'execute-extended-command)
  #+END_SRC
