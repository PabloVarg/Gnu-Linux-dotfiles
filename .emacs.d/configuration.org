#+TITLE: Emacs configuration
#+AUTHOR: Pablo Vargas Bermúdez
#+OPTIONS: toc:nil num:nil

* Configure =Use package=

  #+BEGIN_SRC emacs-lisp
    (require 'use-package-ensure)
    (setq use-package-always-ensure t)
  #+END_SRC

* Configure =Dired=

  #+BEGIN_SRC emacs-lisp
    (put 'dired-find-alternate-file 'disabled nil)
  #+END_SRC

* Configure =Evil=

  #+BEGIN_SRC emacs-lisp
    (use-package evil
      :init
      (setq evil-want-C-u-scroll t)
      :config
      (evil-mode t))
  #+END_SRC

** Escape

   #+BEGIN_SRC emacs-lisp
     (use-package evil-escape
       :config
       (setq-default evil-escape-delay 1
                     evil-escape-key-sequence ",,")
       (evil-escape-mode))
   #+END_SRC

** Leader

   #+BEGIN_SRC emacs-lisp
     (use-package evil-leader
       :after evil
       :init
       (global-evil-leader-mode)
       :config
       (evil-leader/set-leader "<SPC>")
       (evil-leader/set-key
        "w"  'save-buffer
        "q"  'kill-buffer-and-window
        "d"  'dired
        "r"  'query-replace
        "R"  'query-replace-regexp
        "xk" 'kill-current-buffer
        "xc" 'save-buffers-kill-terminal
        "xo" 'delete-other-windows
        "xt" 'delete-window
        "vs" 'split-window-right
        "hs" 'split-window-below))
   #+END_SRC

** Surround

   #+BEGIN_SRC emacs-lisp
     (use-package evil-surround
       :config
       (global-evil-surround-mode t))
   #+END_SRC

** Comments

   #+BEGIN_SRC emacs-lisp
     (use-package evil-nerd-commenter
       :config
       (evil-leader/set-key
       "cc" 'evilnc-comment-or-uncomment-lines
       "cb" 'comment-box
       "cp" 'evilnc-comment-or-uncomment-paragraphs
       "cl" 'evilnc-quick-comment-or-uncomment-to-the-line
       "ci" 'evilnc-copy-and-comment-lines))
   #+END_SRC

** Multiple Cursors

   #+BEGIN_SRC emacs-lisp
     (use-package evil-mc
       :config
       (global-evil-mc-mode 1)
       (define-key evil-normal-state-map (kbd "C-n") 'evil-mc-make-and-goto-next-match))
   #+END_SRC

* Configure =Origami=

  #+BEGIN_SRC emacs-lisp
    (use-package origami
      :hook
      ('prog-mode . 'origami-mode)
      :config
      (define-key evil-normal-state-map (kbd "zk") 'origami-previous-fold)
      (define-key evil-normal-state-map (kbd "zj") 'origami-forward-fold)
      (define-key evil-normal-state-map (kbd "zh") 'origami-backward-fold-same-level)
      (define-key evil-normal-state-map (kbd "zl") 'origami-forward-fold-same-level)
      (define-key evil-normal-state-map (kbd "zo") 'origami-open-node)
      (define-key evil-normal-state-map (kbd "zc") 'origami-close-node)
      (define-key evil-normal-state-map (kbd "zO") 'origami-open-node-recursively)
      (define-key evil-normal-state-map (kbd "zC") 'origami-close-node-recursively)
      (define-key evil-normal-state-map (kbd "za") 'origami-toggle-node)
      (define-key evil-normal-state-map (kbd "zA") 'origami-toggle-all-nodes)
      (define-key evil-normal-state-map (kbd "zr") 'origami-open-all-nodes)
      (define-key evil-normal-state-map (kbd "zm") 'origami-close-all-nodes))
  #+END_SRC

* Configure =Org=

** Settings

  #+BEGIN_SRC emacs-lisp
    (setq org-src-fontify-natively t
          org-src-tab-acts-natively t
          org-src-window-setup 'current-window
          org-confirm-babel-evaluate nil
          org-catch-invisible-edits 'show
          org-return-follows-link t
          org-use-speed-commands t)
  #+END_SRC

** Todo

   #+BEGIN_SRC emacs-lisp
     (setq org-todo-keywords '((sequence "TODO" "INPROGRESS" "DONE"))
           org-todo-keyword-faces '(("INPROGRESS" . (:foreground "yellow" :weight bold))))
   #+END_SRC

** Bullets

   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :hook
       (org-mode . org-bullets-mode))
   #+END_SRC

** Completions

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-structure-template-alist
                  '("E" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
   #+END_SRC

** File paths

   #+BEGIN_SRC emacs-lisp
     (setq org-directory "~/Projects/Org"
           org-agenda-files (list org-directory))
   #+END_SRC

** Visit todo list

   #+BEGIN_SRC emacs-lisp
     (defun visit-todo-list ()
       (interactive)
       (find-file (concat org-directory "/TODO.org")))

     (evil-leader/set-key "ow" 'visit-todo-list)
     (global-set-key (kbd "C-c i") 'visit-todo-list)
   #+END_SRC

** Agenda

   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-span 15
           org-agenda-start-on-weekday nil)
     (evil-leader/set-key "oa" 'org-agenda)
     (global-set-key (kbd "C-c a") 'org-agenda)
   #+END_SRC

** Capture

   #+BEGIN_SRC emacs-lisp
      (setq org-capture-bookmark nil
            org-default-notes-file (concat org-directory "/TODO.org")
            org-default-dreams-file (concat org-directory "/Sueños.org")
            org-capture-templates
            '(("t" "Todo" entry (file+headline org-default-notes-file "Tasks")
               "** TODO %?\n %a")
              ("d" "Dreams" entry (file+headline org-default-dreams-file "Dreams")
               "** Sueño %?")
              ("h" "Homework" entry (file+headline org-default-notes-file "Homework")
               "** TODO Homework: %?\n %A")))
      (add-hook 'org-capture-mode-hook 'evil-insert-state)
      (evil-leader/set-key
        "oc" 'org-capture
        "ol" 'org-store-link
        "oL" 'org-insert-last-stored-link)
     (global-set-key (kbd "C-c l") 'org-store-link)
     (global-set-key (kbd "C-c c") 'org-capture)
   #+END_SRC

* Configure =Minions=

  #+BEGIN_SRC emacs-lisp
    (use-package minions
      :init
      (setq minions-mode-line-lighter ""
            minions-mode-line-delimiters '("" . ""))
      (minions-mode t))
  #+END_SRC

* Configure =Moody=

  #+BEGIN_SRC emacs-lisp
    (use-package moody
      :config
      (moody-replace-mode-line-buffer-identification)
      (moody-replace-vc-mode)
      (setq moody-mode-line-height 18
            x-underline-at-descent-line t))
  #+END_SRC

* Configure =Ivy=

  #+BEGIN_SRC emacs-lisp
    (use-package ivy
      :config
      (ivy-mode t))
  #+END_SRC

* Configure =IBuffer=

  #+BEGIN_SRC emacs-lisp
    (use-package ibuffer
      :bind
      ("C-x C-b" . 'ibuffer)
      :config
      (evil-leader/set-key "xb" 'ibuffer)
      (setq ibuffer-expert t))
  #+END_SRC

* Configure =Which Key=

  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :init
      (which-key-mode))
  #+END_SRC

* Configure =Magit=

  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :bind
      ("C-x g" . magit-status)
      :hook
      (with-editor-mode . evil-insert-state))
    (evil-leader/set-key "og" 'magit-status)
  #+END_SRC

* Configure =Company=

  #+BEGIN_SRC emacs-lisp
    (use-package company
      :config
      (setq company-idle-delay 0
            company-minimum-prefix-length 1
            company-selection-wrap-around t
            company-require-match nil
            company-show-numbers t))
  #+END_SRC

* Configure =Dumb jump=

  #+BEGIN_SRC emacs-lisp
    (use-package dumb-jump
      :config
      (setq dumb-jump-selector 'ivy)
      (define-key evil-normal-state-map (kbd "gD") 'dumb-jump-go))
  #+END_SRC

* Configure =Helpful=

  #+BEGIN_SRC emacs-lisp
    (use-package helpful
      :bind
      ("C-h f" . #'helpful-callable)
      ("C-h v" . #'helpful-variable)
      ("C-h k" . #'helpful-key)
      :config
      (evil-define-key 'normal helpful-mode-map (kbd "q") 'quit-window))
  #+END_SRC

* Configure =Projectile=

  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :config
      (setq projectile-require-project-root nil)
      (projectile-mode t))
  #+END_SRC

* Configure =Counsel=

  #+BEGIN_SRC emacs-lisp
    (use-package counsel
      :bind
      ("C-s"     . 'swiper)
      ("M-x"     . 'counsel-M-x)
      ("M-y"     . 'counsel-yank-pop)
      ("C-x C-f" . 'counsel-find-file)
      ("C-c C-r" . 'ivy-resume)
      ("C-x b"   . 'counsel-switch-buffer)
      ("<f1> f"  . 'counsel-describe-function)
      ("<f1> v"  . 'counsel-describe-variable)
      ("<f1> l"  . 'counsel-find-library)
      ("<f2> i"  . 'counsel-info-lookup-symbol)
      ("<f2> u"  . 'counsel-unicode-char)
      :config
      (evil-leader/set-key
        "<SPC>" 'counsel-M-x
        "f" 'counsel-find-file
        "b" 'counsel-switch-buffer)
      (define-key evil-normal-state-map (kbd "/") 'swiper)
      (define-key evil-normal-state-map (kbd "*") 'swiper-thing-at-point)
      (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))
  #+END_SRC

* Configure =Counsel Projectile=

  #+BEGIN_SRC emacs-lisp
    (use-package counsel-projectile
      :config
      (evil-leader/set-key
        "pf" 'counsel-projectile-find-file
        "pp" 'counsel-projectile-switch-project
        "pc" 'counsel-compile
        "pb" 'counsel-projectile-switch-to-buffer
        "pd" 'counsel-projectile-find-dir
        "pg" 'counsel-projectile-grep)
      (counsel-projectile-mode t))
  #+END_SRC

* Configure =Hungry delete=

  #+BEGIN_SRC emacs-lisp
    (use-package hungry-delete
      :bind
      ("C-c DEL" . 'hungry-delete-backward))
  #+END_SRC

* Configure =Flycheck=

  #+BEGIN_SRC emacs-lisp
    (use-package flycheck)
  #+END_SRC

* Configure =Yasnippet=

  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet-snippets)
    (use-package yasnippet
      :config
      (yas-global-mode 1)
      (global-set-key (kbd "M-/") 'company-yasnippet))
  #+END_SRC

* Customization

  #+BEGIN_SRC emacs-lisp
    (setq custom-file "~/.emacs.d/custom.el")
    (load custom-file)
  #+END_SRC

* Shell

  #+BEGIN_SRC emacs-lisp
    (evil-leader/set-key "ot" 'eshell)
    (global-set-key (kbd "C-c t") 'eshell)
  #+END_SRC

* Identification

  #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Pablo"
          user-mail-address "pvarber@outlook.es")
  #+END_SRC

* Backup

  #+BEGIN_SRC emacs-lisp
    (setq make-backup-files nil
          backup-inhibited t
          auto-save-default nil)
  #+END_SRC

* UI

** Frames

   #+BEGIN_SRC emacs-lisp
     (scroll-bar-mode -1)
     (tool-bar-mode   -1)
     (tooltip-mode    -1)
     (menu-bar-mode   -1)

     (blink-cursor-mode -1)

     (global-display-line-numbers-mode +1)
     (column-number-mode t)

     (set-window-scroll-bars (minibuffer-window) nil nil)

     (setq echo-keystrokes 0.1)
   #+END_SRC

** Bell

   #+BEGIN_SRC emacs-lisp
     (setq ring-bell-function 'ignore)
   #+END_SRC

** Font

   #+BEGIN_SRC emacs-lisp
     (set-default-font "Hack 11" nil t)
   #+END_SRC

** Prettify

   #+BEGIN_SRC emacs-lisp
     (global-prettify-symbols-mode t)
   #+END_SRC

* Programming environments

** Emacs lisp

   #+BEGIN_SRC emacs-lisp
     (add-hook 'emacs-lisp-mode-hook 'company-mode)
   #+END_SRC

** Markdown

   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode)
   #+END_SRC

* Programming configuration

** Indentation

   #+BEGIN_SRC emacs-lisp
     (setq-default tab-width 4
                   indent-tabs-mode nil)
   #+END_SRC

** Align

   #+BEGIN_SRC emacs-lisp
     (define-key evil-normal-state-map (kbd "ga") 'align-regexp)
   #+END_SRC

** Camel case

   #+BEGIN_SRC emacs-lisp
     (use-package subword
       :hook (prog-mode . subword-mode))
   #+END_SRC

* Editing

** Save kill

   #+BEGIN_SRC emacs-lisp
     (setq save-interprogram-paste-before-kill t)
   #+END_SRC

** Yes or No prompt

   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

** Reload files

   #+BEGIN_SRC emacs-lisp
     (global-auto-revert-mode t)
   #+END_SRC

** Visit configuration

   #+BEGIN_SRC emacs-lisp
     (defun visit-emacs-config ()
       (interactive)
       (find-file "~/.emacs.d/configuration.org"))

     (evil-leader/set-key "oe" 'visit-emacs-config)
     (global-set-key (kbd "C-c e") 'visit-emacs-config)
   #+END_SRC

** Always kill current buffer

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x k") 'kill-current-buffer)
   #+END_SRC

** Clean whitespaces

   #+BEGIN_SRC emacs-lisp
     (add-hook 'before-save-hook 'whitespace-cleanup)
   #+END_SRC

** Scrolling

   #+BEGIN_SRC emacs-lisp
     (setq scroll-preserve-screen-position t)
   #+END_SRC

** Point

   #+BEGIN_SRC emacs-lisp
     (setq save-place-file "~/.emacs.d/saveplace")
     (save-place-mode 1)

     (setq make-pointer-invisible t)
   #+END_SRC

** Parentheses

   #+BEGIN_SRC emacs-lisp
     (setq show-paren-delay 0)

     (show-paren-mode 1)
     (electric-indent-mode 1)
     (electric-pair-mode 1)
   #+END_SRC

** Highlight

   #+BEGIN_SRC emacs-lisp
     (global-hl-line-mode)
   #+END_SRC

** Support for various configuration files

   #+BEGIN_SRC emacs-lisp
     (use-package emacs
       :mode (("sxhkdrc" . conf-mode)))
   #+END_SRC

** Frame title

   #+BEGIN_SRC emacs-lisp
     (setq frame-title-format '("" "Emacs: %b"))
   #+END_SRC

** Scratch buffer

   #+BEGIN_SRC emacs-lisp
     (setq initial-scratch-message nil)
   #+END_SRC

* Themes

  #+BEGIN_SRC emacs-lisp
    (use-package solarized-theme)
    (use-package color-theme-sanityinc-tomorrow)
    (load-theme 'sanityinc-tomorrow-night t)
  #+END_SRC

** Transparency

   #+BEGIN_SRC emacs-lisp
     (set-frame-parameter (selected-frame) 'alpha 100)
   #+END_SRC

* Keybindings

  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-o") 'other-window)
    (global-set-key (kbd "M-p") 'previous-buffer)
    (global-set-key (kbd "M-n") 'next-buffer)
    (global-set-key (kbd "C-+") 'text-scale-increase)
    (global-set-key (kbd "C--") 'text-scale-decrease)
  #+END_SRC
